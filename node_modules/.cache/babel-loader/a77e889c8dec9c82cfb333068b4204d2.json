{"ast":null,"code":"import _initializerDefineProperty from \"/Users/huangguanshanyao/Desktop/pare-is/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/huangguanshanyao/Desktop/pare-is/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/huangguanshanyao/Desktop/pare-is/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _temp;\n\nimport { observable, action } from 'mobx';\nimport utils from './utils';\nimport { message, localMessage } from '@utils';\nlet componentDostate = (_class = (_temp = class componentDostate {\n  constructor() {\n    _initializerDefineProperty(this, \"um\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"password\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"checked\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"load\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"textOnchange\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"passWordOnchange\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"CheckboxOnChange\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"BtnDenglu\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"CheckParm\", _descriptor9, this);\n\n    _initializerDefineProperty(this, \"onCookie\", _descriptor10, this);\n\n    _initializerDefineProperty(this, \"oninit\", _descriptor11, this);\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"um\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"password\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"checked\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"load\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"textOnchange\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return e => {\n      if (e) {\n        this.um = e.target.value;\n      } else {\n        this.um = '';\n      }\n    };\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"passWordOnchange\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return e => {\n      if (e) {\n        this.password = e.target.value;\n      } else {\n        this.password = '';\n      }\n    };\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"CheckboxOnChange\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return e => {\n      if (e) {\n        this.checked = e.target.checked;\n      } else {\n        this.checked = false;\n      }\n    };\n  }\n}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"BtnDenglu\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      if (!this.CheckParm()) return;\n      this.load = true;\n      this.onCookie(); // localMessage.setlocal('menuData', menuData);\n\n      localMessage.setlocal('UM', this.um);\n      window.appHistory.push({\n        pathname: `/home`\n      });\n    };\n  }\n}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, \"CheckParm\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      if (this.load) return; // c重复点击无效\n\n      if (!this.um) {\n        message.warning('请填写账号');\n        return;\n      }\n\n      if (!this.password) {\n        message.warning('请填写密码');\n        return;\n      }\n\n      return true;\n    };\n  }\n}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, \"onCookie\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      if (this.checked) {\n        utils.setCookie('account', this.um);\n        utils.setCookie('password', this.password);\n        utils.setCookie('checked', this.checked);\n      } else {\n        utils.delCookie('password');\n        utils.delCookie('checked');\n      }\n    };\n  }\n}), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, \"oninit\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      this.um = '';\n      this.password = '';\n      this.load = false;\n      this.checked = false;\n\n      if (utils.getCookie('account')) {\n        this.um = utils.getCookie('account');\n      }\n\n      if (utils.getCookie('password')) {\n        this.password = utils.getCookie('password');\n      }\n\n      if (utils.getCookie('checked')) {\n        this.checked = utils.getCookie('checked');\n      }\n    };\n  }\n})), _class);\nexport default new componentDostate();","map":{"version":3,"sources":["/Users/huangguanshanyao/Desktop/pare-is/src/containers/page/login/index.stste.js"],"names":["observable","action","utils","message","localMessage","componentDostate","e","um","target","value","password","checked","CheckParm","load","onCookie","setlocal","window","appHistory","push","pathname","warning","setCookie","delCookie","getCookie"],"mappings":"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","sourcesContent":["import { observable, action } from 'mobx';\nimport utils from './utils';\nimport { message, localMessage } from '@utils';\n\nclass componentDostate {\n\n    @observable um = '';//账号\n    @observable password = '';//密码\n    @observable checked = false;\n    @observable load = false;\n\n    //修改账号\n    @action textOnchange = (e) => {\n        if (e) {\n            this.um = e.target.value;\n        }\n        else {\n            this.um = '';\n        }\n    }\n    //修改密码\n    @action passWordOnchange = (e) => {\n        if (e) {\n            this.password = e.target.value;\n        }\n        else {\n            this.password = '';\n        }\n    }\n    //修改密码\n    @action CheckboxOnChange = (e) => {\n        if (e) {\n            this.checked = e.target.checked;\n        }\n        else {\n            this.checked = false;\n        }\n    }\n\n    @action BtnDenglu = () => {\n        if (!this.CheckParm()) return;\n        this.load = true;\n        this.onCookie();\n        // localMessage.setlocal('menuData', menuData);\n        localMessage.setlocal('UM', this.um);\n        window.appHistory.push({\n            pathname: `/home`\n        });\n\n\n    }\n\n    //验证登录参数\n    @action CheckParm = () => {\n        if (this.load) return; // c重复点击无效\n        if (!this.um) {\n            message.warning('请填写账号');\n            return;\n        }\n        if (!this.password) {\n            message.warning('请填写密码');\n            return;\n        }\n        return true;\n\n    }\n\n    @action onCookie = () => {\n        if (this.checked) {\n            utils.setCookie('account', this.um);\n            utils.setCookie('password', this.password);\n            utils.setCookie('checked', this.checked);\n        }\n        else {\n            utils.delCookie('password');\n            utils.delCookie('checked');\n\n        }\n    }\n\n    @action oninit = () => {\n        this.um = '';\n        this.password = '';\n        this.load = false;\n        this.checked = false;\n        if (utils.getCookie('account')) {\n            this.um = utils.getCookie('account');\n        }\n        if (utils.getCookie('password')) {\n            this.password = utils.getCookie('password');\n        }\n        if (utils.getCookie('checked')) {\n            this.checked = utils.getCookie('checked');\n        }\n    }\n\n}\nexport default new componentDostate();"]},"metadata":{},"sourceType":"module"}