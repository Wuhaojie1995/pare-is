{"ast":null,"code":"class DataTools {\n  constructor() {\n    this.toFixed = (num, decimals = 2, multiple = 1) => {\n      if (Number.isNaN(Number(num)) && num !== null && num !== '') {\n        return (num * multiple).toFixed(decimals);\n      }\n    };\n\n    this.thousandSepartor = (num, decimals = 0, multiple = 1) => {\n      if (!Number.isNaN(Number(num)) && num !== null && num !== '') {\n        //分割小数点和整数部分\n        num = (num * multiple).toFixed(decimals);\n        num = num.split('.');\n\n        if (num[0] == '-0') {\n          //如果值位负零点几的时候bug\n          num[0] = `-${Number(num[0]).toLocaleString()}`;\n        } else {\n          //整数部分➕千分位\n          num[0] = Number(num[0].toLocaleString());\n        } //合并整数小数部分\n\n\n        return num.join('.');\n      }\n\n      return '-';\n    };\n\n    this.percentumData = (data, decimals = 2) => {\n      const strData = parseFloat(data) * 100;\n      const retData = strData.toFixed(decimals) + '%';\n\n      if (retData == 'NaN%') {\n        return '-';\n      }\n\n      return retData;\n    };\n\n    this.renderTryData = data => {\n      if (typeof data == 'undefined') {\n        return '-';\n      } else if (data == 0) {\n        return 0;\n      } else if (data == '' || data == null) {\n        return '-';\n      }\n\n      return data;\n    };\n\n    this.renderTextData = data => {\n      if (typeof data == 'undefined') {\n        return '暂无数据...';\n      } else if (data == '') {\n        return '暂无数据...';\n      }\n\n      return data;\n    };\n  }\n\n}\n\nexport default new DataTools();","map":{"version":3,"sources":["/Users/huangguanshanyao/Desktop/mydemo/src/containers/utils/dataTools.js"],"names":["DataTools","toFixed","num","decimals","multiple","Number","isNaN","thousandSepartor","split","toLocaleString","join","percentumData","data","strData","parseFloat","retData","renderTryData","renderTextData"],"mappings":"AACA,MAAMA,SAAN,CAAgB;AAAA;AAAA,SAIZC,OAJY,GAIF,CAACC,GAAD,EAAMC,QAAQ,GAAG,CAAjB,EAAoBC,QAAQ,GAAG,CAA/B,KAAqC;AAG3C,UAAIC,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACH,GAAD,CAAnB,KAA6BA,GAAG,KAAK,IAArC,IAA6CA,GAAG,KAAK,EAAzD,EAA6D;AACzD,eAAO,CAACA,GAAG,GAAGE,QAAP,EAAiBH,OAAjB,CAAyBE,QAAzB,CAAP;AACH;AACJ,KAVW;;AAAA,SAcZI,gBAdY,GAcO,CAACL,GAAD,EAAMC,QAAQ,GAAG,CAAjB,EAAoBC,QAAQ,GAAG,CAA/B,KAAqC;AACpD,UAAI,CAACC,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACH,GAAD,CAAnB,CAAD,IAA8BA,GAAG,KAAK,IAAtC,IAA8CA,GAAG,KAAK,EAA1D,EAA8D;AAC1D;AACAA,QAAAA,GAAG,GAAG,CAACA,GAAG,GAAGE,QAAP,EAAiBH,OAAjB,CAAyBE,QAAzB,CAAN;AACAD,QAAAA,GAAG,GAAGA,GAAG,CAACM,KAAJ,CAAU,GAAV,CAAN;;AACA,YAAIN,GAAG,CAAC,CAAD,CAAH,IAAU,IAAd,EAAoB;AAChB;AACAA,UAAAA,GAAG,CAAC,CAAD,CAAH,GAAU,IAAGG,MAAM,CAACH,GAAG,CAAC,CAAD,CAAJ,CAAN,CAAeO,cAAf,EAAgC,EAA7C;AACH,SAHD,MAIK;AACD;AACAP,UAAAA,GAAG,CAAC,CAAD,CAAH,GAASG,MAAM,CAACH,GAAG,CAAC,CAAD,CAAH,CAAOO,cAAP,EAAD,CAAf;AACH,SAXyD,CAY1D;;;AACA,eAAOP,GAAG,CAACQ,IAAJ,CAAS,GAAT,CAAP;AACH;;AACD,aAAO,GAAP;AACH,KA/BW;;AAAA,SAiCZC,aAjCY,GAiCI,CAACC,IAAD,EAAOT,QAAQ,GAAG,CAAlB,KAAwB;AACpC,YAAMU,OAAO,GAAGC,UAAU,CAACF,IAAD,CAAV,GAAmB,GAAnC;AACA,YAAMG,OAAO,GAAGF,OAAO,CAACZ,OAAR,CAAgBE,QAAhB,IAA4B,GAA5C;;AACA,UAAIY,OAAO,IAAI,MAAf,EAAuB;AACnB,eAAO,GAAP;AACH;;AACD,aAAOA,OAAP;AACH,KAxCW;;AAAA,SA0CZC,aA1CY,GA0CIJ,IAAI,IAAI;AACpB,UAAI,OAAOA,IAAP,IAAe,WAAnB,EAAgC;AAC5B,eAAO,GAAP;AACH,OAFD,MAEO,IAAIA,IAAI,IAAI,CAAZ,EAAe;AAClB,eAAO,CAAP;AACH,OAFM,MAEA,IAAIA,IAAI,IAAI,EAAR,IAAcA,IAAI,IAAI,IAA1B,EAAgC;AACnC,eAAO,GAAP;AACH;;AACD,aAAOA,IAAP;AACH,KAnDW;;AAAA,SAqDZK,cArDY,GAqDKL,IAAI,IAAI;AACrB,UAAI,OAAOA,IAAP,IAAe,WAAnB,EAAgC;AAC5B,eAAO,SAAP;AACH,OAFD,MAEO,IAAIA,IAAI,IAAI,EAAZ,EAAgB;AACnB,eAAO,SAAP;AACH;;AACD,aAAOA,IAAP;AACH,KA5DW;AAAA;;AAAA;;AA8DhB,eAAe,IAAIZ,SAAJ,EAAf","sourcesContent":["\nclass DataTools {\n    //保留二位小数\n    //props NUm  传入数据 decimals 保留小数的位数，multiple 原数据扩大的倍数\n    //return string || undefind\n    toFixed = (num, decimals = 2, multiple = 1) => {\n       \n        \n        if (Number.isNaN(Number(num)) && num !== null && num !== '') {\n            return (num * multiple).toFixed(decimals);\n        }\n    }\n    //千分位\n    // props num 传入的数据  decimals保留小数的位数 ，multiple愿数据扩大的倍数\n    // return string || -\n    thousandSepartor = (num, decimals = 0, multiple = 1) => {\n        if (!Number.isNaN(Number(num)) && num !== null && num !== '') {\n            //分割小数点和整数部分\n            num = (num * multiple).toFixed(decimals);\n            num = num.split('.');\n            if (num[0] == '-0') {\n                //如果值位负零点几的时候bug\n                num[0] = `-${Number(num[0]).toLocaleString()}`;\n            }\n            else {\n                //整数部分➕千分位\n                num[0] = Number(num[0].toLocaleString());\n            }\n            //合并整数小数部分\n            return num.join('.');\n        }\n        return '-';\n    }\n    //保存位百分比形式\n    percentumData = (data, decimals = 2) => {\n        const strData = parseFloat(data) * 100;\n        const retData = strData.toFixed(decimals) + '%';\n        if (retData == 'NaN%') {\n            return '-';\n        }\n        return retData;\n    }\n    //判断字符串的类型是否为空\n    renderTryData = data => {\n        if (typeof data == 'undefined') {\n            return '-';\n        } else if (data == 0) {\n            return 0;\n        } else if (data == '' || data == null) {\n            return '-';\n        }\n        return data;\n    }\n    //判断数据位空时，返回无数据\n    renderTextData = data => {\n        if (typeof data == 'undefined') {\n            return '暂无数据...';\n        } else if (data == '') {\n            return '暂无数据...';\n        }\n        return data;\n    }\n}\nexport default new DataTools();"]},"metadata":{},"sourceType":"module"}